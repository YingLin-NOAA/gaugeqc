#!/bin/ksh -x
#
# Script to send hourly and daily gauge data to the 40-day rotating archive,
#   /dcom/us007003/gaugeqc/
#
# Hourly data: copied from /com/ingest/prod/shf.yyyymmdd/hrly.prcp.day.mmdd
#   and re-named to hrly.prcp.day.yyyymmdd
# Daily data: processed from /com/ingest/prod/shf.yyyymmdd/rfc24-* 
#   using sub-script gaugeqc_load_qual_prcp.pl (Michaud), which emulates 
#   Sid Katz's processing on sgi109.
#   
# This job is to be run at 03:40 UTC each day.
#
set -x

# export PERLLIB=/usrx/local/Date-Calc.5.3/lib/site_perl/5.8.0/aix-thread-multi
# YL: on Tide, it's on /usr/share/perl5/Date/Calc.pm. 
#     No need to export PERLLIB when running interactively.  
# For running under LSF: on 24 Jan 2013, the Date-Calc-6.3 perl modules were 
# installed in GPFS on Tide (/usrx/local/pm5) for compute node use.   
export PERL5LIB="/usrx/local/pm5/lib64/perl5:/usrx/local/pm5/share/perl5"

cd $DATA

cp $COMIN/*.eval .
cp $COMIN/*.good .
cp $COMIN/*.precip .
cp $COMIN/*.neigh .

#
yday=$PDYm1
today=`/nwprod/util/exec/ndate +24 ${yday}12 | cut -c 1-8`

# For coldstart, if argument is 20070717, QC would go from 07/17 to 08/14 (29
#   days total)
# For warm start, if argument is 20070816, QC would be done for 20070815
#   (i.e. ${today-1}
#
# cold/warm run types are set in the SMS script. If run=cold, "colddate" is 
# also set in the SMS script. 

if [ $run = cold ]; then
  $USHgauge/gaugeqc_run_qc_cold.pl $colddate
else
  $USHgauge/gaugeqc_precip_qc.pl $today 
fi

# testonly
date
# testonly

# Note to SPA: please send /com/hourly/prod/current.* to ftpprd:
#
 if [ $SENDDBN = YES ]
 then
    $DBNROOT/bin/dbn_alert MODEL VERIF_PRECIP $job $COMOUT/current.eval 
    $DBNROOT/bin/dbn_alert MODEL VERIF_PRECIP $job $COMOUT/current.good 
    $DBNROOT/bin/dbn_alert MODEL VERIF_PRECIP $job $COMOUT/current.evalH 
    $DBNROOT/bin/dbn_alert MODEL VERIF_PRECIP $job $COMOUT/current.goodH 
 fi
#

exit
